var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"moon_riders","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"C:\\Users\\Roger\\Documents\\stm32_intern\\moon_riders_ert_rtw","tag":"","groupDisplay":"Main file","code":"/*\r\n * File: ert_main.c\r\n *\r\n * Code generated for Simulink model 'moon_riders'.\r\n *\r\n * Model version                  : 1.16\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Tue Mar 25 10:49:10 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include <stddef.h>\r\n#include <stdio.h>            /* This example main program uses printf/fflush */\r\n#include \"moon_riders.h\"               /* Model header file */\r\n\r\n/*\r\n * Associating rt_OneStep with a real-time clock or interrupt service routine\r\n * is what makes the generated code \"real-time\".  The function rt_OneStep is\r\n * always associated with the base rate of the model.  Subrates are managed\r\n * by the base rate from inside the generated code.  Enabling/disabling\r\n * interrupts and floating point context switches are target specific.  This\r\n * example code indicates where these should take place relative to executing\r\n * the generated code step function.  Overrun behavior should be tailored to\r\n * your application needs.  This example simply sets an error status in the\r\n * real-time model and returns from rt_OneStep.\r\n */\r\nvoid rt_OneStep(void);\r\nvoid rt_OneStep(void)\r\n{\r\n  static boolean_T OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n\r\n  /* Check for overrun */\r\n  if (OverrunFlag) {\r\n    rtmSetErrorStatus(moon_riders_M, \"Overrun\");\r\n    return;\r\n  }\r\n\r\n  OverrunFlag = true;\r\n\r\n  /* Save FPU context here (if necessary) */\r\n  /* Re-enable timer or interrupt here */\r\n  /* Set model inputs here */\r\n\r\n  /* Step the model */\r\n  moon_riders_step();\r\n\r\n  /* Get model outputs here */\r\n\r\n  /* Indicate task complete */\r\n  OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n  /* Restore FPU context here (if necessary) */\r\n  /* Enable interrupts here */\r\n}\r\n\r\n/*\r\n * The example main function illustrates what is required by your\r\n * application code to initialize, execute, and terminate the generated code.\r\n * Attaching rt_OneStep to a real-time clock is target specific. This example\r\n * illustrates how you do this relative to initializing the model.\r\n */\r\nint_T main(int_T argc, const char *argv[])\r\n{\r\n  /* Unused arguments */\r\n  (void)(argc);\r\n  (void)(argv);\r\n\r\n  /* Initialize model */\r\n  moon_riders_initialize();\r\n\r\n  /* Attach rt_OneStep to a timer or interrupt service routine with\r\n   * period 0.1 seconds (base rate of the model) here.\r\n   * The call syntax for rt_OneStep is\r\n   *\r\n   *  rt_OneStep();\r\n   */\r\n  printf(\"Warning: The simulation will run forever. \"\r\n         \"Generated ERT main won't simulate model step behavior. \"\r\n         \"To change this behavior select the 'MAT-file logging' option.\\n\");\r\n  fflush((NULL));\r\n  while (rtmGetErrorStatus(moon_riders_M) == (NULL)) {\r\n    /*  Perform application tasks here */\r\n  }\r\n\r\n  /* Terminate model */\r\n  moon_riders_terminate();\r\n  return 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"moon_riders.c","type":"source","group":"model","path":"C:\\Users\\Roger\\Documents\\stm32_intern\\moon_riders_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: moon_riders.c\r\n *\r\n * Code generated for Simulink model 'moon_riders'.\r\n *\r\n * Model version                  : 1.16\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Tue Mar 25 10:49:10 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"moon_riders.h\"\r\n#include \"rtwtypes.h\"\r\n\r\n/* Named constants for Chart: '<Root>/Chart' */\r\n#define moon_riders_IN_Hazard_Blinking ((uint8_T)1U)\r\n#define moon_riders_IN_Idle            ((uint8_T)2U)\r\n#define moon_riders_IN_Left_Blinking   ((uint8_T)3U)\r\n#define moon_riders_IN_Right_Blinking  ((uint8_T)4U)\r\n\r\n/* Block states (default storage) */\r\nDW_moon_riders_T moon_riders_DW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nExtU_moon_riders_T moon_riders_U;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nExtY_moon_riders_T moon_riders_Y;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL_moon_riders_T moon_riders_M_;\r\nRT_MODEL_moon_riders_T *const moon_riders_M = &moon_riders_M_;\r\n\r\n/* Model step function */\r\nvoid moon_riders_step(void)\r\n{\r\n  /* Chart: '<Root>/Chart' incorporates:\r\n   *  Inport: '<Root>/LEFT_BUTTON'\r\n   *  Inport: '<Root>/RIGHT_BUTTON  '\r\n   */\r\n  if (moon_riders_DW.is_active_c3_moon_riders == 0U) {\r\n    moon_riders_DW.is_active_c3_moon_riders = 1U;\r\n    moon_riders_DW.is_c3_moon_riders = moon_riders_IN_Idle;\r\n\r\n    /* Outport: '<Root>/LEFT_LED' */\r\n    moon_riders_Y.LEFT_LED = 0.0;\r\n\r\n    /* Outport: '<Root>/RIGHT_LED' */\r\n    moon_riders_Y.RIGHT_LED = 0.0;\r\n  } else {\r\n    switch (moon_riders_DW.is_c3_moon_riders) {\r\n     case moon_riders_IN_Hazard_Blinking:\r\n      /* Outport: '<Root>/LEFT_LED' */\r\n      moon_riders_Y.LEFT_LED = 1.0;\r\n\r\n      /* Outport: '<Root>/RIGHT_LED' */\r\n      moon_riders_Y.RIGHT_LED = 1.0;\r\n      if ((moon_riders_U.LEFT_BUTTON == 1.0) || (moon_riders_U.RIGHT_BUTTON ==\r\n           1.0)) {\r\n        moon_riders_DW.is_c3_moon_riders = moon_riders_IN_Idle;\r\n\r\n        /* Outport: '<Root>/LEFT_LED' */\r\n        moon_riders_Y.LEFT_LED = 0.0;\r\n\r\n        /* Outport: '<Root>/RIGHT_LED' */\r\n        moon_riders_Y.RIGHT_LED = 0.0;\r\n      }\r\n      break;\r\n\r\n     case moon_riders_IN_Idle:\r\n      /* Outport: '<Root>/LEFT_LED' */\r\n      moon_riders_Y.LEFT_LED = 0.0;\r\n\r\n      /* Outport: '<Root>/RIGHT_LED' */\r\n      moon_riders_Y.RIGHT_LED = 0.0;\r\n      if ((moon_riders_U.LEFT_BUTTON == 1.0) && (moon_riders_U.RIGHT_BUTTON ==\r\n           1.0)) {\r\n        moon_riders_DW.is_c3_moon_riders = moon_riders_IN_Hazard_Blinking;\r\n\r\n        /* Outport: '<Root>/LEFT_LED' */\r\n        moon_riders_Y.LEFT_LED = 1.0;\r\n\r\n        /* Outport: '<Root>/RIGHT_LED' */\r\n        moon_riders_Y.RIGHT_LED = 1.0;\r\n      } else if (moon_riders_U.LEFT_BUTTON == 1.0) {\r\n        moon_riders_DW.is_c3_moon_riders = moon_riders_IN_Left_Blinking;\r\n\r\n        /* Outport: '<Root>/LEFT_LED' */\r\n        moon_riders_Y.LEFT_LED = 1.0;\r\n      } else if (moon_riders_U.RIGHT_BUTTON == 1.0) {\r\n        moon_riders_DW.is_c3_moon_riders = moon_riders_IN_Right_Blinking;\r\n\r\n        /* Outport: '<Root>/RIGHT_LED' */\r\n        moon_riders_Y.RIGHT_LED = 1.0;\r\n      }\r\n      break;\r\n\r\n     case moon_riders_IN_Left_Blinking:\r\n      /* Outport: '<Root>/LEFT_LED' */\r\n      moon_riders_Y.LEFT_LED = 1.0;\r\n\r\n      /* Outport: '<Root>/RIGHT_LED' */\r\n      moon_riders_Y.RIGHT_LED = 0.0;\r\n      if (moon_riders_U.RIGHT_BUTTON == 1.0) {\r\n        moon_riders_DW.is_c3_moon_riders = moon_riders_IN_Right_Blinking;\r\n\r\n        /* Outport: '<Root>/LEFT_LED' */\r\n        moon_riders_Y.LEFT_LED = 0.0;\r\n\r\n        /* Outport: '<Root>/RIGHT_LED' */\r\n        moon_riders_Y.RIGHT_LED = 1.0;\r\n      } else if (moon_riders_U.LEFT_BUTTON == 1.0) {\r\n        moon_riders_DW.is_c3_moon_riders = moon_riders_IN_Idle;\r\n\r\n        /* Outport: '<Root>/LEFT_LED' */\r\n        moon_riders_Y.LEFT_LED = 0.0;\r\n      }\r\n      break;\r\n\r\n     default:\r\n      /* Outport: '<Root>/LEFT_LED' */\r\n      /* case IN_Right_Blinking: */\r\n      moon_riders_Y.LEFT_LED = 0.0;\r\n\r\n      /* Outport: '<Root>/RIGHT_LED' */\r\n      moon_riders_Y.RIGHT_LED = 1.0;\r\n      if (moon_riders_U.LEFT_BUTTON == 1.0) {\r\n        moon_riders_DW.is_c3_moon_riders = moon_riders_IN_Left_Blinking;\r\n\r\n        /* Outport: '<Root>/LEFT_LED' */\r\n        moon_riders_Y.LEFT_LED = 1.0;\r\n\r\n        /* Outport: '<Root>/RIGHT_LED' */\r\n        moon_riders_Y.RIGHT_LED = 0.0;\r\n      } else if (moon_riders_U.RIGHT_BUTTON == 1.0) {\r\n        moon_riders_DW.is_c3_moon_riders = moon_riders_IN_Idle;\r\n\r\n        /* Outport: '<Root>/RIGHT_LED' */\r\n        moon_riders_Y.RIGHT_LED = 0.0;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n\r\n  /* End of Chart: '<Root>/Chart' */\r\n}\r\n\r\n/* Model initialize function */\r\nvoid moon_riders_initialize(void)\r\n{\r\n  /* (no initialization code required) */\r\n}\r\n\r\n/* Model terminate function */\r\nvoid moon_riders_terminate(void)\r\n{\r\n  /* (no terminate code required) */\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"moon_riders.h","type":"header","group":"model","path":"C:\\Users\\Roger\\Documents\\stm32_intern\\moon_riders_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: moon_riders.h\r\n *\r\n * Code generated for Simulink model 'moon_riders'.\r\n *\r\n * Model version                  : 1.16\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Tue Mar 25 10:49:10 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_moon_riders_h_\r\n#define RTW_HEADER_moon_riders_h_\r\n#ifndef moon_riders_COMMON_INCLUDES_\r\n#define moon_riders_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#endif                                 /* moon_riders_COMMON_INCLUDES_ */\r\n\r\n#include \"moon_riders_types.h\"\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n/* Block states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  uint8_T is_active_c3_moon_riders;    /* '<Root>/Chart' */\r\n  uint8_T is_c3_moon_riders;           /* '<Root>/Chart' */\r\n} DW_moon_riders_T;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\ntypedef struct {\r\n  real_T LEFT_BUTTON;                  /* '<Root>/LEFT_BUTTON' */\r\n  real_T RIGHT_BUTTON;                 /* '<Root>/RIGHT_BUTTON  ' */\r\n} ExtU_moon_riders_T;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\ntypedef struct {\r\n  real_T LEFT_LED;                     /* '<Root>/LEFT_LED' */\r\n  real_T RIGHT_LED;                    /* '<Root>/RIGHT_LED' */\r\n} ExtY_moon_riders_T;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM_moon_riders_T {\r\n  const char_T * volatile errorStatus;\r\n};\r\n\r\n/* Block states (default storage) */\r\nextern DW_moon_riders_T moon_riders_DW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nextern ExtU_moon_riders_T moon_riders_U;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nextern ExtY_moon_riders_T moon_riders_Y;\r\n\r\n/* Model entry point functions */\r\nextern void moon_riders_initialize(void);\r\nextern void moon_riders_step(void);\r\nextern void moon_riders_terminate(void);\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL_moon_riders_T *const moon_riders_M;\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'moon_riders'\r\n * '<S1>'   : 'moon_riders/Chart'\r\n */\r\n#endif                                 /* RTW_HEADER_moon_riders_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"moon_riders_private.h","type":"header","group":"model","path":"C:\\Users\\Roger\\Documents\\stm32_intern\\moon_riders_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: moon_riders_private.h\r\n *\r\n * Code generated for Simulink model 'moon_riders'.\r\n *\r\n * Model version                  : 1.16\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Tue Mar 25 10:49:10 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_moon_riders_private_h_\r\n#define RTW_HEADER_moon_riders_private_h_\r\n#include \"rtwtypes.h\"\r\n#include \"moon_riders_types.h\"\r\n#endif                                 /* RTW_HEADER_moon_riders_private_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"moon_riders_types.h","type":"header","group":"model","path":"C:\\Users\\Roger\\Documents\\stm32_intern\\moon_riders_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: moon_riders_types.h\r\n *\r\n * Code generated for Simulink model 'moon_riders'.\r\n *\r\n * Model version                  : 1.16\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Tue Mar 25 10:49:10 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_moon_riders_types_h_\r\n#define RTW_HEADER_moon_riders_types_h_\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM_moon_riders_T RT_MODEL_moon_riders_T;\r\n\r\n#endif                                 /* RTW_HEADER_moon_riders_types_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"C:\\Users\\Roger\\Documents\\stm32_intern\\moon_riders_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'moon_riders'.\r\n *\r\n * Model version                  : 1.16\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Tue Mar 25 10:49:10 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: Intel->x86-64 (Windows64)\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32\r\n *                       native word size:  64\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T.                        *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*===========================================================================*\r\n * Complex number type definitions                                           *\r\n *===========================================================================*/\r\n#define CREAL_T\r\n\r\ntypedef struct {\r\n  real32_T re;\r\n  real32_T im;\r\n} creal32_T;\r\n\r\ntypedef struct {\r\n  real64_T re;\r\n  real64_T im;\r\n} creal64_T;\r\n\r\ntypedef struct {\r\n  real_T re;\r\n  real_T im;\r\n} creal_T;\r\n\r\n#define CINT8_T\r\n\r\ntypedef struct {\r\n  int8_T re;\r\n  int8_T im;\r\n} cint8_T;\r\n\r\n#define CUINT8_T\r\n\r\ntypedef struct {\r\n  uint8_T re;\r\n  uint8_T im;\r\n} cuint8_T;\r\n\r\n#define CINT16_T\r\n\r\ntypedef struct {\r\n  int16_T re;\r\n  int16_T im;\r\n} cint16_T;\r\n\r\n#define CUINT16_T\r\n\r\ntypedef struct {\r\n  uint16_T re;\r\n  uint16_T im;\r\n} cuint16_T;\r\n\r\n#define CINT32_T\r\n\r\ntypedef struct {\r\n  int32_T re;\r\n  int32_T im;\r\n} cint32_T;\r\n\r\n#define CUINT32_T\r\n\r\ntypedef struct {\r\n  uint32_T re;\r\n  uint32_T im;\r\n} cuint32_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true}};